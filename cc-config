#!/bin/sh
# Manages symlinks for cc, c++, etc.

# Usage Statement
usage() {
	while read -r line
	do printf '%b\n' "$line"
	done <<-USAGE
	usage: ${0##*/} [-b <TOOLSET> | -c <TOOLSET>] [options]
	Manages symlinks for cc, c++, etc.

	options:
	-L            list available binary tool package versions
	-l            list available C/C++ compilers
	-b <TOOLSET>  set binary tool symlinks
	-c <TOOLSET>  set C/C++ compiler symlinks
	-B            print current binary tool set
	-C            print current C/C++ compiler set
	-D            delete both binary and compiler tool symlinks
	-d <bin|cc>   delete symlinks
	-h            display this message
	-v            show version
	USAGE

	exit "${1:-1}"
}

print_version() {
	printf '%s\n' "${0##*/}-@VERSION@"
	exit 0
}

# Print to stdout
msg() { printf "${0##*/}: %b\n" "$*"; }

# Print to stderr
emsg() { printf "${0##*/}: %b\n" "$*" 1>&2; }

# Make sure we are only doing one type of operation
# args allowed together:
# 	-B and -C
# 	-L and -l
# 	-b and -c
set_action_type() {
	[ "$action_type" ] || { action_type=$1; return 0; }
	[ "$action_type" = "$1" ] || { emsg "too many actions\n"; usage 1>&2; }
}

# Parse Arguments
[ "$*" ] || usage 1>&2
while [ "$*" ]
do
	case $1 in
		-  ) shift; continue ;;
		-- ) shift; break ;;
		-* ) flag=${1#-}; shift ;;
		*  ) shift; continue ;;
	esac

	while [ "$flag" ]
	do
		arg=${flag%${flag#?}}
		case $arg in
			B )current_bin=1; set_action_type "current" ;;
			C )current_cc=1; set_action_type "current" ;;
			D )delete_symlinks=1; set_action_type "delete" ;;
			L )list_available_bin=1; set_action_type "list" ;;
			b )
				set_bin_symlinks=1; set_action_type "set"
				if [ "$1" ]
				then bin_selection=$1; shift
				else emsg "-$arg: missing value\n"; usage 1>&2
				fi
			;;
			c )
				set_cc_symlinks=1; set_action_type "set"
				if [ "$1" ]
				then cc_selection=$1; shift
				else emsg "-$arg: missing value\n"; usage 1>&2
				fi
			;;
			d )
				set_action_type "delete_single"
				case $1 in
					bin ) delete_symlinks=bin; shift ;;
					cc  ) delete_symlinks=cc; shift ;;
				esac
				[ "$delete_symlinks" ] || { emsg "-$arg: invalid value $1\n"; usage 1>&2; }
			;;
			v ) print_version ;;
			h ) usage 0 ;;
			l ) list_available_cc=1; set_action_type list ;;
			* ) emsg "-$arg: invalid argument\n"; usage 1>&2 ;;
		esac
		flag="${flag#?}"
	done
done

[ "$action_type" ] || { emsg "no action set\n"; usage 1>&2; }

# CHOST is needed to find binutils and gcc but will also be used for some symlinks
[ "$CHOST" ] || {
	CHOST="$(portageq envvar CHOST)"
	[ "$CHOST" ] || { emsg "\$CHOST not set. Portage may be broken"; exit 1; }
}

db_path="/var/db/${0##*/}"

print_current_bin() {
	[ "$current_bin" ] || return 0
	[ -f "$db_path/bin" ] || {
		emsg "Current binary tools not available. See \`-h\` for how to set them"
		exit 1
	}

	while read -r line
	do printf '%s\n' "$line"
	done < "$db_path/bin"

	unset line
}

print_current_cc() {
	[ "$current_cc" ] || return 0
	[ -f "$db_path/bin" ] || {
		emsg "Current C/C++ compiler tools not available. See \`-h\` for how to set them"
		exit 1
	}

	while read -r line
	do printf '%s\n' "$line"
	done < "$db_path/cc"

	unset line
}

# sys-devel/binutils - /usr/$CHOST/binutils-bin/<version>
# sys-devel/clang    - /usr/lib/llvm/<slot>/bin
# sys-devel/gcc      - /usr/$CHOST/gcc-bin/<version>
# sys-devel/llvm     - /usr/lib/llvm/<slot>/bin
find_available() {
	case $1 in
		bin ) search_path=/usr/$CHOST/binutils-bin ;;
		cc  ) search_path=/usr/$CHOST/gcc-bin; do_clang_check=1 ;;
	esac

	sep=${2:-:}

	list=""
	for version in "$search_path/"[0-9]*
	do [ -d "$version" ] && list="$list$version$sep"
	done

	for slot in /usr/lib/llvm/*
	do
		[ -d "$slot" ] || continue
		[ "$do_clang_check" ] && { [ -e "$slot/bin/clang" ] || continue; }
		list="$list$slot$sep"
	done

	list=${list%$sep}
	[ "$list" ] || { emsg unable to find "$1" tools; exit 1; }

	printf '%s' "$list"

	unset search_path do_clang_check sep list version slot
}

construct_name() (
	name=${1%/*}; name="${name##*/}"; name="${name%-bin}"
	version="${1##*/}"
	[ "$name" = llvm ] && [ "$2" = cc  ] && name=clang

	printf '%s' "$name-$version"
)

print_list() (
	case $2 in
		bin ) list_header="Binary Tools:";;
		cc  ) list_header="C/C++ Tools";;
	esac

	printf '%s\n' "$list_header"

	IFS=:
	count=0
	for item in $1
	do
		printf '%s\n' "  [$count] $(construct_name "$item" "$2")"
		count=$((count+1))
	done
)

print_available_bin() (
	[ "$list_available_bin" ] || return 0
	available_bin=$(find_available bin)

	print_list "$available_bin" bin
	printf '\n'
)

print_available_cc() (
	[ "$list_available_cc" ] || return 0
	available_cc=$(find_available cc)

	print_list "$available_cc" cc
	printf '\n'
)

deconstruct_name() {
	version="${1#*-}"
	name="${1%-*}"

	case $2 in
		bin )
			[ "$name" = binutils ] || [ "$name" = llvm ] || {
				emsg "\"$1\" is an invalid selection for $2 tools"
				exit 1
			}
		;;
		cc )
			[ "$name" = clang ] || [ "$name" = gcc ] || {
				emsg "\"$1\" is an invalid selection for $2 tools"
				exit 1
			}
		;;
	esac

	case $name in
		binutils|gcc ) printf '%s' "/usr/$CHOST/$name-bin/$version" ;;
		clang|llvm   ) printf '%s' "/usr/lib/llvm/$version" ;;
	esac

	unset version name
}

deconstruct_number() {
	case $1 in
		*[!0-9]* ) emsg "\"$1\" is not a number"; exit 1 ;;
		*        ) num=$1 ;;
	esac

	# shellcheck disable=SC2046
	set -- $(find_available "$2" ' ')
	[ $# -gt "$num" ] || { emsg "\"$num\" is not a valid selection"; exit 1; }

	shift "$num"
	printf '%s' "$1"

	unset num
}

get_symlink_list() {
	path=$1
	type=$2
	shift 2

	case $path in
		*llvm* )
			[ "$type" = bin ] && path_suffix=bin/llvm-
			[ "$type" = cc ] && path_suffix=bin/
		;;
	esac

	list=""
	for i
	do [ -e "$path/$path_suffix$i" ] && list="$list$path/$path_suffix$i:"
	done

	list="${list%:}"
	[ "$list" ] || { emsg nothing to symlink; exit 1; }

	printf '%s' "$list"

	unset path type path_suffix list
}

make_symlinks() (
	IFS=:
	for i in $1
	do
		dest=${i##*/}
		dest=${dest#llvm-}

		case $dest in
			clang++|g++ ) dest=c++ ;;
			clang-cpp   ) dest=cpp ;;
			clang|gcc   ) dest=cc ;;
			cxxfilt     ) dest=c++filt ;;
		esac

		temp=/usr/bin/.cc-config.$dest
		[ "$dest" = cc ] || temp_chost=/usr/bin/.cc-config.$CHOST-$dest

		ln -sf "$i" "$temp"
		[ "$dest" = cc ] || ln -sf "$i" "$temp_chost"

		mv "$temp" "/usr/bin/$dest"
		[ "$dest" = cc ] || mv "$temp_chost" "/usr/bin/$CHOST-$dest"
	done
)

update_current() {
	mkdir -p "$db_path"
	printf '%s\n' "$1" > "$db_path/$2"
}

update_bin_symlinks() {
	[ "$set_bin_symlinks" ] || return 0

	# binutils has c++filt while llvm has cxxfilt
	#
	# binutils has ld (bfd and gold). Gentoo's llvm package does not ship
	# with lld and Gentoo's lld package is not slotted. It is unclear to me
	# if newer versions of lld can work with older versions of llvm and
	# clang. The linker can also be specified in LDFLAGS and Gentoo's clang
	# package has the `default-lld` useflag. Leave ld's symlink alone.
	#
	# llvm-as deals with "LLVM assembly language"
	binary_tools_binutils="c++filt as"
	binary_tools_llvm="cxxfilt"
	binary_tools_common="addr2line ar nm objcopy objdump ranlib readelf size strings strip"

	case $1 in
		[0-9]* ) path=$(deconstruct_number "$1" bin) ;;
		[a-z]* ) path=$(deconstruct_name "$1" bin) ;;
		*      ) emsg "\"$1\" is an invalid selection"; exit 1 ;;
	esac

	# shellcheck disable=SC2086
	case $path in
		*binutils* ) set -- $binary_tools_common $binary_tools_binutils ;;
		*llvm*     ) set -- $binary_tools_common $binary_tools_llvm ;;
	esac

	symlinks=$(get_symlink_list "$path" bin "$@")
	[ "$symlinks" ] || exit 1

	make_symlinks "$symlinks"
	update_current "$path" bin

	unset binary_tools_binutils binary_tools_llvm binary_tools_common path symlinks
}

update_cc_symlinks() {
	[ "$set_cc_symlinks" ] || return 0

	compiler_tools_gcc="cpp g++ gcc"
	compiler_tools_clang="clang clang++ clang-cpp"
	compiler_tools_common=""

	case $1 in
		[0-9]* ) path=$(deconstruct_number "$1" cc) ;;
		[a-z]* ) path=$(deconstruct_name "$1" cc) ;;
		*      ) msg "\"$1\" is an invalid selection" 1>&2; exit 1 ;;
	esac

	# shellcheck disable=SC2086
	case $path in
		*gcc*  ) set -- $compiler_tools_common $compiler_tools_gcc ;;
		*llvm* ) set -- $compiler_tools_common $compiler_tools_clang ;;
	esac

	symlinks=$(get_symlink_list "$path" cc "$@")
	[ "$symlinks" ] || exit 1

	make_symlinks "$symlinks"
	update_current "$path" cc

	unset compiler_tools_gcc compiler_tools_clang compiler_tools_common path symlinks
}

delete_symlinks() (
	[ "$delete_symlinks" ] || return 0

	binary_tools="addr2line ar as c++filt nm objcopy objdump ranlib readelf size strings strip"
	compiler_tools="c++ cc cpp"

	# shellcheck disable=SC2086
	case $delete_symlinks in
		1 )
			update_current " " bin
			update_current " " cc
			set -- $binary_tools $compiler_tools
		;;
		bin ) update_current " " bin; set -- $binary_tools ;;
		cc  ) update_current " " cc; set -- $compiler_tools ;;
	esac

	for i
	do
		rm "/usr/bin/$i"
		[ "$i" = cc ] || rm "/usr/bin/$CHOST-$i"
	done
)

case $action_type in
	current ) print_current_bin; print_current_cc ;;
	list    ) print_available_bin; print_available_cc ;;
	set     ) update_bin_symlinks "$bin_selection"; update_cc_symlinks "$cc_selection" ;;
	delete* ) delete_symlinks ;;
esac
